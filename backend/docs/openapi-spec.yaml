openapi: 3.0.3
info:
  title: Virtual Waitlist
  version: 1.0.0
tags:
  - name: waitlist
    description: Operation related to the virtual waitlist
  - name: restaurants
paths:
  /restaurants/{uuid}:
    get:
      summary: Retrieve the restaurant configuration.
      operationId: restaurants#show
      tags:
        - restaurants
      parameters:
        - $ref: "#/components/parameters/RestaurantUuid"
      responses:
        200:
          description: Successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
  /restaurants:
    post:
      summary: Create a new restaurant.
      description: FOR DEVELOPMENT PURPOSE ONLY.
      operationId: restaurants#create
      tags:
        - restaurants
      requestBody:
        $ref: "#/components/requestBodies/CreateRestaurantRequest"
      responses:
        201:
          $ref: "#/components/responses/RestaurantCreateSuccessfulResponse"
        400:
          $ref: "#/components/responses/InvalidRequestResponse"
        422:
          $ref: "#/components/responses/UnprocessableRequestResponse"
  
  /waitlist/{restaurant_uuid}join:
    post:
      summary: Join the waitlist for the specified restaurant.
      description: Register a party in the waitlist.
      operationId: waitlist#join
      tags:
        - waitlist
      parameters:
        - $ref: "#/components/parameters/RestaurantUuid"
      requestBody:
        $ref: "#/components/requestBodies/JoinWaitlistRequest"
      responses:
        201:
          $ref: "#/components/responses/JoinWaitlistSuccessfulResponse"
        400:
          $ref: "#/components/responses/InvalidRequestResponse"
        404:
          description: Restaurant wasn't found. Impossible to create Party
        422:
          $ref: "#/components/responses/UnprocessableRequestResponse"
  
  /waitlist/{uuid}:
    get:
      summary: Retrieve the party's position in the waitlist.
      description: This endpoint will open a event source (see Server Sent Events for more information) with the API on which will an update on the party's position will be sent every 3 seconds.
      operationId: waitlist#position_stream
      tags:
        - waitlist
      parameters:
        - $ref: "#/components/parameters/PartyUuid"
      responses:
        200:
          $ref: "#/components/responses/GetWaitlistPositionResponse"
        404:
          description: Party wasn't found. It may have already expired or checked in.
    delete:
      summary: Delete the party from the waitlist. This action cannot be reverted.
      operationId: waitlist#destroy
      tags:
        - waitlist
      parameters:
        - $ref: "#/components/parameters/PartyUuid"
      responses:
        204:
          description: The party was removed from the waitlist.
  /waitlist/{uuid}/check-in:
    post:
      summary: Checking in the party.
      description: The party will be checked in and removed from the waitlist. They are supposed to be seated.
      operationId: waitlist#check_in
      tags:
        - waitlist
      parameters:
        - $ref: "#/components/parameters/PartyUuid"
      responses:
        200:
          description: Check-in successful
        403:
          $ref: "#/components/responses/ForbiddenRequestResponse"
        404:
          description: Party wasn't found. It may have already expired or checked in.

components:
  schemas:
    RestaurantBase:
      type: object
      description: Base restaurant. Only used for creation.
      properties:
        name:
          type: string
          description: Name of the restaurant.
          example: "My little Caf√©"
        capacity:
          type: integer
          description: Indicate the capacity of the restaurant, in other words, the number of chairs.
          minimum: 1
          example: 10
        max_party_size:
          type: integer
          description: Maximum party size allowed in the restaurant. By default, equals `capacity`
          minimum: 1
          example: 10
      required:
        - name
        - capacity
        - max_party_size
    Restaurant:
      allOf:
        - $ref: "#/components/schemas/BaseParty"
        - type: object
          properties:
            uuid:
              type: string
              format: uuid
              example: "000000000000000000000001"
          required:
            - uuid

    BaseParty:
      type: object
      description: Base representation of a party.
      properties:
        name:
          type: string
          description: Name of the party, typically the name of the person that placed the reservation or joined the waitlist.
          example: John Doe
        size:
          type: integer
          description: Size of the party, how many seats will be required. Cannot exceed the `Restaurant.max_party_size`
          minimum: 1
          example: 5
      required:
        - name
        - size
    Party:
      allOf:
        - $ref: "#/components/schemas/BaseParty"
        - type: object
          properties:
            uuid:
              type: string
              format: uuid
              example: "000000000000000000000001"
            created_on:
              type: string
              format: datetime
              description: UTC date of when the party was register in the waitlist.
            expires_on:
              type: string
              format: datetime
              description: UTC date of when the party will be automatically removed from the waitlist.
          required:
            - uuid
            - created_on
            - expires_on
    PartyPosition:
      type: object
      properties:
        position:
          type: number
          minimum: 0
          description: Position of the party in the waitlist. Zero indicates the party will be the next one.
        check_in_allowed:
          type: boolean
          default: false
          description: If yes or no, the party can check in. It will be true when position equals 0 and the restaurant has enough seats available.
    ApiResponse:
      type: object
      description: Default API response
      properties:
        message:
          type: string
          example: "Operation successful"
          description: Informative message about the operation
      required:
        - message
  parameters:
    PartyUuid:
      in: path
      name: uuid
      required: true
      schema:
        type: string
        format: uuid
        description: Unique identifier of the party
        example: "000000000000000000000001"
    RestaurantUuid:
      in: path
      name: uuid
      required: true
      schema:
        type: string
        format: uuid
        description: Unique identifier of the restaurant
        example: "000000000000000000000001"
  requestBodies:
    JoinWaitlistRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BaseParty"
    CreateRestaurantRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RestaurantBase"

  responses:
    RestaurantCreateSuccessfulResponse:
      description: The restaurant was created
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Restaurant"
    JoinWaitlistSuccessfulResponse:
      description: The party was registered in the waitlist.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Party"
    GetWaitlistPositionResponse:
      description: Retrieve and subscribe to the party position in the waitlist
      content:
        text/event-stream:
          schema:
            $ref: "#/components/schemas/PartyPosition"
    InvalidRequestResponse:
      description: Operation failed, request body or parameter are missing or invalid. See message for more information
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
    ForbiddenRequestResponse:
      description: Operation not allowed.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiResponse"
    UnprocessableRequestResponse:
      description: Some parameters are incorrect.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ApiResponse"
              - type: object
                properties:
                  errors:
                    type: object
                    additionalProperties: { }
                    example:
                      capacity: [ "cannot be blank" ]
  